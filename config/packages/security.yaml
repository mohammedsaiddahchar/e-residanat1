security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Utilisateurs
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
           
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\AuthAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used


    role_hierarchy :

        ROLE_PROF        : ROLE_USER 
        ROLE_FONC        : ROLE_USER
        ROLE_SCOLARITE   : ROLE_FONC
        ROLE_SCOLARITEFC : ROLE_FONC
        ROLE_SERVICEEXT  : ROLE_FONC
        ROLE_CHEF_STRUCT : ROLE_PROF       
        ROLE_CHEF_DEP    : ROLE_PROF     
        ROLE_CHEF_FIL    : ROLE_PROF
        ROLE_DIR_ADJ     : ROLE_PROF
        ROLE_DIR         : ROLE_PROF
        ROLE_MANAGER     : ROLE_FONC
        ROLE_CHEF_SERV   : ROLE_FONC
        ROLE_SG          : ROLE_FONC
        ROLE_ABS         : ROLE_FONC
        ROLE_RH          : ROLE_FONC
        ROLE_FINANCE     : ROLE_FONC
        ROLE_STOCK     : ROLE_FONC

        ROLE_ADMIN : [ROLE_FINANCE,ROLE_MANAGER,ROLE_SERVICEEXT,ROLE_SCOLARITEFC,ROLE_SCOLARITE,ROLE_RH,ROLE_ABS,ROLE_SG,ROLE_CHEF_SERV,ROLE_CHEF_STRUCT , ROLE_CHEF_DEP,ROLE_CHEF_FIL,ROLE_DIR_ADJ,ROLE_DIR]
        ROLE_SUPER_ADMIN : [ROLE_ADMIN , ROLE_ALLOWED_TO_SWITCH]


    access_control:
        
     - { path: ^/admin, roles: ROLE_ADMIN }
     - { path: ^/admin, roles: ROLE_USER }
     - { path: ^(?!/(login|changeLocale|reset-password|check-email|reset)), roles: ROLE_USER }
     - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY }
     - { path: ^/, roles: ROLE_DENY }
           
         

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
